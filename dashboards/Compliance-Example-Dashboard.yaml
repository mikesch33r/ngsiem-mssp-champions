sections:
  section-1726168363732-0:
    collapsed: false
    order: 0
    title: Dashboard Details
    widgetIds:
    - b6ed9d1a-d340-45d7-93f2-5b75d384d66c
    - 4d157e50-d35e-43ac-98ab-bd5415a4192d
    - note-1727187815054-0
    - 66a7420e-0bac-48b6-adc0-499f03b66f9c
    - d4487ff0-b9c0-49cc-82f2-bd8d6caaab40
    - note-1726166476961-1
  section-1726165310280-0:
    collapsed: true
    timeSelector:
      end: now
      start: 1d
    widgetIds:
    - 39310337-b82b-4728-b93c-0c388ed4862d
    - f3258151-1daf-404b-84d4-6a7ec409d78b
    - 335c8fb9-c636-431b-9807-9891edb9e4c0
    - 351ed275-203b-4242-8f16-0be3e0269688
    - 2463873a-0645-4f9e-8c8c-dbaf7b7c419c
    - 67d29952-833b-4ee1-8254-639472715fe9
    - 7904f3b5-0d48-402e-93b7-88a708af3747
    - fa99cb2b-02a9-434e-b922-99f76f082229
    - 92b7b703-b9e6-43c3-b5bb-02b3c5f3fee5
    - 692ee352-4067-4414-939a-c66985e8bd6b
    - 2bfe1dd0-47fa-44e7-bb72-4b0249ff7bd3
    order: 1
    title: Access-Control
  section-1726166115962-0:
    collapsed: true
    timeSelector:
      end: now
      start: 1d
    widgetIds:
    - 58242c5e-5323-4746-94c3-75207ca28e06
    - 67a6a7ab-cc34-4272-a415-ddbf8de3cc9d
    - 3fe394a9-f251-4d9f-84e5-2f7b1448f32b
    - 7cb63c68-1235-4cbc-8fdf-1f449429ef8c
    - parameter-panel-1726760459191-0
    - note-1725900646032-0
    order: 2
    title: Audit and Accountability
  section-1726164099750-0:
    collapsed: true
    timeSelector:
      end: now
      start: 1d
    widgetIds:
    - 87363ebb-3194-4778-822d-3f4b12679504
    - 020a3b23-8ea8-4e85-a8ef-5b35026fdfc4
    - 02d35c48-c437-4b32-8898-a3837e1e37c5
    - 12c3ee21-5f64-483e-bfbb-e61a848e2c77
    - 422e0b37-a2cc-4f9a-97d7-e8fb9cbd48b2
    - 57a44bcb-2491-40a2-8eb4-26017140d65d
    - 6ba8f44f-0bd2-41c3-9db8-016f34e89e30
    - e56a243e-390f-43d7-a37a-5cd59319785c
    - 5777baf2-55e4-4311-ae40-6bd0457c32ec
    order: 3
    title: Incident Response
  section-1726164638427-0:
    collapsed: true
    timeSelector:
      end: now
      start: 1d
    widgetIds:
    - parameter-panel-1727886406081-0
    - note-1725902925766-0
    - 1648bf3c-b982-4b6c-a381-4e4b8b2f92ac
    order: 5
    title: Risk Management
name: 'bsilva - Next Gen SIEM Compliance '
updateFrequency: never
timeSelector: {}
sharedTimeInterval:
  enabled: true
  isLive: false
  start: 1d
widgets:
  4d157e50-d35e-43ac-98ab-bd5415a4192d:
    x: 0
    y: 4
    height: 2
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Filter to events with required fields, and rename fields to match CPS.
      | (#repo=xdr_indicatorsrepo Ngsiem.alert.id=/thirdparty|ngsiem/Fi)
        OR (#event_simpleName="Event_EppDetectionSummaryEvent" OR #event_simpleName="Event_IdpDetectionSummaryEvent" OR #event_simpleName="Event_DataProtectionDetectionSummaryEvent")
      | case {
          #type=falcon-raw-data
            | #event_simpleName=/Detection/F
            | #event_simpleName!=DetectionExcluded
            | severity!="informational"
            | #event.kind:="alert"
            | #Vendor:="crowdstrike" ;
          #type!=falcon-raw-data
            | #event.kind="alert" ;
      }

      // Add a multipick array for value selection.
      | in(field=#Vendor, values=[?Vendor])

      // Count the total number of alerts.
      | count()
    end: now
    start: 1d
    width: 3
    options:
      default: {}
    visualization: single-value
    title: Total Detections
    isLive: false
    type: query
  39310337-b82b-4728-b93c-0c388ed4862d:
    x: 8
    y: 5
    height: 4
    queryString: |-
      #event_simpleName=UserLogon
      | event_platform=Win
      | wildcard(field=UserIsAdmin, pattern=1, ignoreCase=true)
      | wildcard(field=UserName, pattern=?UserName, ignoreCase=true)
      | wildcard(field=LogonType, pattern=?LogonType, ignoreCase=true)
      | sankey(source="UserName", target="ComputerName")
    end: now
    start: 1d
    width: 4
    options:
      cell-overflow: wrap-text
      configured-columns: {}
      row-numbers-enabled: false
    visualization: table-view
    title: Admin logon to system
    isLive: false
    type: query
  2bfe1dd0-47fa-44e7-bb72-4b0249ff7bd3:
    x: 0
    height: 5
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/UserLogon$/F
              | #Vendor:="crowdstrike"
              | client.ip:=aip
              | user.name:=UserName
              | #event.module:="sso"
              | event.reason:=name ;
          #type!=falcon-raw-data
              | #event.outcome=success
              | event.category[0]=authentication ;
      }

      // Enrich specific events with SubStatus.
      | case {
          #type=falcon-raw-data
            | SubStatus=*
            | $falcon/helper:enrich(field=SubStatus)
            | event.reason:=SubStatus ;
          * ;
      }

      // Add a multipick array for value selection.
      | in(field=#Vendor, values=[?Vendor])

      // Rename events that might have multiple username fields.
      | case {
          user.name="-"
            | user.target.name=/./F
            | rename([[user.target.name, user.name]]) ;
          * ;
      }

      // Ensure the user.name exists.
      | user.name=/./F
      | user.name!=/(\$$|^DWM-|^LOCAL\sSERVICE$|^UMFD-|^$|^SYSTEM$|^ANONYMOUS\sLOGON$|^NT\sAUTHORITY\\SYSTEM$|^scheduled_tasks$)/F

      // Alias the field if it does not exist.
      | case {
          event.reason!=*
            | event.reason:=event.action ;
          * ;
      }

      // Format the results.
      | top(event.reason, limit=10)
    end: now
    start: 1d
    width: 6
    y: 14
    interactions:
    - name: filterClick
      titleTemplate: '{{ fields.event.reason }}'
      queryString: "// Add a multipick array for value selection.\n| in(field=#repo.cid,\
        \ values=[?cid_input])\n| case { \n    #type=falcon-raw-data\n      | #event_simpleName=/UserLogon$/\n\
        \      | #Vendor:=\"crowdstrike\"\n      | client.ip:=aip\n      | user.name:=UserName\n\
        \      | #event.module:=\"sso\"\n      | event.reason:=Technique ;\n    #type!=falcon-raw-data\n\
        \      | #event.outcome=failure\n      | event.category[0]=authentication\
        \ ;\n}\n| client.ip=*\n| ipLocation(client.ip)\n| asn(client.ip)\n| case {\n\
        \    user.name=\"-\"\n      | user.target.name=/./F\n      | rename([[user.target.name,\
        \ user.name]]) ;\n    * ;\n}\n| user.name=/./\n| user.name!=/(\\$$|^DWM-|^LOCAL\\\
        sSERVICE$|^UMFD-|^$|^SYSTEM$|^ANONYMOUS\\sLOGON$|^NT\\sAUTHORITY\\\\SYSTEM$|^scheduled_tasks$)/\n\
        | case {\n    event.reason!=*\n      | event.reason:=event.action ;\n    *\
        \ ;\n}\n| event.reason=?event_reason"
      useWidgetTimeWindow: true
      arguments:
        cid_input: '["{{ parameters.cid_input }}"]'
        event_reason: '["{{fields.event.reason}}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      legendPosition: right
      series: {}
      withLegendTitle: false
    visualization: pie-chart
    title: Authentication - Top Success Reasons
    isLive: false
    type: query
  422e0b37-a2cc-4f9a-97d7-e8fb9cbd48b2:
    x: 6
    height: 5
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Filter to events with required fields, and rename fields to match CPS.
      | (#repo=xdr_indicatorsrepo Ngsiem.alert.id=/thirdparty|ngsiem/Fi)
        OR (#event_simpleName="Event_EppDetectionSummaryEvent" OR #event_simpleName="Event_IdpDetectionSummaryEvent" OR #event_simpleName="Event_DataProtectionDetectionSummaryEvent")
      | case {
          #type=falcon-raw-data
            | #event_simpleName=/Detection/F
            | #event_simpleName!=/DetectionExcluded|Event_XdrDetectionSummaryEvent/F
            | severity!="informational"
            | #event.kind:="alert"
            | threat.tactic.name[0]:=Tactic
            | threat.technique.name[0]:=Technique
            | threat.technique.name[0]=/./F
            | #Vendor:="crowdstrike" ;
          #type!=falcon-raw-data
            | #event.kind="alert" ;
      }

      // Add a multipick array for value selection.
      | in(field=#Vendor, values=[?Vendor])

      // Get the top vendor and technique combinations.
      | top([threat.tactic.name[0], threat.technique.name[0]], limit=15)

      // Create a sankey from the results.
      | sankey(source=threat.tactic.name[0], target=threat.technique.name[0], weight=count(threat.technique.name[0], distinct=true))
    visualization: sankey
    end: now
    start: 1d
    width: 6
    y: 8
    interactions:
    - name: filterClick
      titleTemplate: '{{ fields.source }}, {{ fields.target }}'
      queryString: "// Add a multipick array for value selection.\n| in(field=#repo.cid,\
        \ values=[?cid_input])\n| (#repo=xdr_indicatorsrepo Ngsiem.alert.id=/thirdparty|ngsiem/i)\
        \ \n    OR (#event_simpleName=\"Event_EppDetectionSummaryEvent\" OR #event_simpleName=\"\
        Event_IdpDetectionSummaryEvent\" OR #event_simpleName=\"Event_DataProtectionDetectionSummaryEvent\"\
        )\n| case { \n    #type=falcon-raw-data\n      | #event_simpleName=/Detection/\n\
        \      | #event_simpleName!=/DetectionExcluded|Event_XdrDetectionSummaryEvent/\n\
        \      | severity!=\"informational\"\n      | #event.kind:=\"alert\"\n   \
        \   | threat.tactic.name[0]:=Tactic\n      | threat.technique.name[0]:=Technique\n\
        \      | threat.technique.name[0]=/./\n      | #Vendor:=\"crowdstrike\" ;\n\
        \    #type!=falcon-raw-data\n      | #event.kind=\"alert\" ;\n} \n| threat.technique.name[0]=?threat_technique_name_0_\
        \ \n| threat.tactic.name[0]=?threat_tactic_name_0_"
      useWidgetTimeWindow: true
      arguments:
        cid_input: '["{{ parameters.cid_input }}"]'
        threat_tactic_name_0_: '["{{ fields.source }}"]'
        threat_technique_name_0_: '["{{ fields.target }}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    title: Detections - Tactic to Technique - Most Frequent
    isLive: false
    type: query
  parameter-panel-1727886406081-0:
    x: 2
    y: 0
    parameterIds:
    - DetectionSourceCount
    - included_ProductModules
    - included_productTypes
    - min_or_equal_severity
    height: 2
    width: 10
    title: Possible Incident Filters
    type: parameterPanel
  335c8fb9-c636-431b-9807-9891edb9e4c0:
    x: 0
    y: 5
    height: 4
    queryString: |-
      #event_simpleName=UserLogon
      | event_platform=Win
      | UserSid="S-1-5-21-*"
      | wildcard(field=UserIsAdmin, pattern=?UserIsAdmin, ignoreCase=true)
      | wildcard(field=UserName, pattern=?UserName, ignoreCase=true)
      | wildcard(field=LogonType, pattern=?LogonType, ignoreCase=true)
      | default(field=[PasswordLastSet], "0")
      | passwordAge:=(now()-(PasswordLastSet*1000))/1000/60/60/24
      | passwordAgeDays:=round("passwordAge")
      | passwordAgeDays:=avg("passwordAgeDays")
      | round("passwordAgeDays")
      | default(field=[passwordAgeDays], "N/A")
    end: now
    start: 7d
    width: 4
    options:
      default: {}
    visualization: single-value
    title: Avg Password Age
    isLive: false
    type: query
  12c3ee21-5f64-483e-bfbb-e61a848e2c77:
    x: 0
    y: 0
    height: 4
    text: This section provides example queries around detections for first- and third-party
      data, specifically the tagged event `#event.type=alert`. That event type is
      part of [CPS](https://library.humio.com/logscale-parsing-standard/pasta.html)
      and allows you to quickly identify detections in your data.
    width: 2
    title: ''
    type: note
  66a7420e-0bac-48b6-adc0-499f03b66f9c:
    x: 9
    y: 3
    description: Values with a highlighted cell color will link to other components
      of the Falcon platform.
    height: 3
    queryString: |-
      createEvents(["{\"Cell Color Legend\":\"Falcon Console Search\"}", "{\"Cell Color Legend\":\"Counter Adversary Operations\"}", "{\"Cell Color Legend\":\"Indicator Graph\"}", "{\"Cell Color Legend\":\"Identity Protection\"}"])
      | parseJson()
      | table("Cell Color Legend", limit=10)
      | sort(field="Cell Color Legend", order=asc, limit=10)
    end: now
    start: 1d
    width: 3
    options:
      cell-overflow: wrap-text
      configured-columns:
        Cell Color Legend:
          color:
            conditions:
            - color: '#126cc6'
              condition:
                arg: Falcon Console Search
                type: Equal
            - color: '#C93637'
              condition:
                arg: Counter Adversary Operations
                type: Equal
            - color: '#AFDDF4'
              condition:
                arg: Indicator Graph
                type: Equal
            - color: '#91BD0F'
              condition:
                arg: Identity Protection
                type: Equal
      row-numbers-enabled: false
    visualization: table-view
    title: Clickable Link Details
    isLive: false
    type: query
  note-1725900646032-0:
    x: 0
    y: 0
    height: 4
    text: This section Demonstrates Coverage of data being ingested by the system
    width: 3
    title: ''
    type: note
  57a44bcb-2491-40a2-8eb4-26017140d65d:
    x: 0
    height: 5
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Filter to events with required fields, and rename fields to match CPS.
      | (#repo=xdr_indicatorsrepo Ngsiem.alert.id=/thirdparty|ngsiem/Fi)
        OR (#event_simpleName="Event_EppDetectionSummaryEvent" OR #event_simpleName="Event_IdpDetectionSummaryEvent" OR #event_simpleName="Event_DataProtectionDetectionSummaryEvent")
      | case {
          #type=falcon-raw-data
            | #event_simpleName=/Detection/F
            | #event_simpleName!=/DetectionExcluded|Event_XdrDetectionSummaryEvent/F
            | severity!="informational"
            | #event.kind:="alert"
            | threat.tactic.name[0]:=Tactic
            | threat.technique.name[0]:=Technique
            | threat.technique.name[0]=/./F
            | #Vendor:="crowdstrike" ;
          #type!=falcon-raw-data
            | #event.kind="alert" ;
      }

      // Add a multipick array for value selection.
      | in(field=#Vendor, values=[?Vendor])

      // Get the top vendor and tactic combinations.
      | top([#Vendor, threat.tactic.name[0]], limit=15)

      // Create a sankey from the results.
      | sankey(source=#Vendor, target=threat.tactic.name[0], weight=count(threat.tactic.name[0], distinct=true))
    visualization: sankey
    end: now
    start: 1d
    width: 6
    y: 8
    interactions:
    - name: filterClick
      titleTemplate: '{{ fields.source }}, {{ fields.target }}'
      queryString: "// Add a multipick array for value selection.\n| in(field=#repo.cid,\
        \ values=[?cid_input])\n| (#repo=xdr_indicatorsrepo Ngsiem.alert.id=/thirdparty|ngsiem/i)\
        \ \n    OR (#event_simpleName=\"Event_EppDetectionSummaryEvent\" OR #event_simpleName=\"\
        Event_IdpDetectionSummaryEvent\" OR #event_simpleName=\"Event_DataProtectionDetectionSummaryEvent\"\
        )\n| case { \n    #type=falcon-raw-data\n      | #event_simpleName=/Detection/\n\
        \      | #event_simpleName!=/DetectionExcluded|Event_XdrDetectionSummaryEvent/\n\
        \      | severity!=\"informational\"\n      | #event.kind:=\"alert\"\n   \
        \   | threat.tactic.name[0]:=Tactic\n      | threat.technique.name[0]:=Technique\n\
        \      | threat.technique.name[0]=/./\n      | #Vendor:=\"crowdstrike\" ;\n\
        \    #type!=falcon-raw-data\n      | #event.kind=\"alert\" ;\n} \n| threat.tactic.name[0]=?threat_tactic_name_0_\
        \ \n| #Vendor=?_Vendor"
      useWidgetTimeWindow: true
      arguments:
        _Vendor: '["{{ fields.source }}"]'
        cid_input: '["{{ parameters.cid_input }}"]'
        threat_tactic_name_0_: '["{{ fields.target }}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    title: Detections - Vendor to Tactic - Most Frequent
    isLive: false
    type: query
  parameter-panel-1726760459191-0:
    x: 3
    y: 0
    parameterIds:
    - VendorName
    height: 4
    width: 9
    title: Coverage Filter
    type: parameterPanel
  7904f3b5-0d48-402e-93b7-88a708af3747:
    x: 0
    y: 19
    height: 5
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/UserLogon$/F
              | #Vendor:="crowdstrike"
              | client.ip:=aip
              | user.name:=UserName
              | #event.module:="sso"
              | event.reason:=name ;
          #type!=falcon-raw-data
              | #event.outcome=success
              | event.category[0]=authentication ;
      }

      // Enrich specific events with SubStatus.
      | case {
          #type=falcon-raw-data
            | SubStatus=*
            | $falcon/helper:enrich(field=SubStatus)
            | event.reason:=SubStatus ;
          * ;
      }

      // Add a multipick array for value selection.
      | in(field=#Vendor, values=[?Vendor])

      // Rename events that might have multiple username fields.
      | case {
          user.name="-"
            | user.target.name=/./F
            | rename([[user.target.name, user.name]]) ;
          * ;
      }

      // Enrich the source IP.
      | case {
          client.ip="-"
            | source.ip=/^\d/F
            | rename([[source.ip, client.ip]]) ;
          client.ip=/^\d/F ;
      }
      | ipLocation(client.ip)
      | asn(client.ip)

      // Ensure the user.name exists.
      | user.name=/./F
      | user.name!=/(\$$|^DWM-|^LOCAL\sSERVICE$|^UMFD-|^$|^SYSTEM$|^ANONYMOUS\sLOGON$|^NT\sAUTHORITY\\SYSTEM$|^scheduled_tasks$)/F
      | user.target.name!=/(\$$|^DWM-|^LOCAL\sSERVICE$|^UMFD-|^$|^SYSTEM$|^ANONYMOUS\sLOGON$|^NT\sAUTHORITY\\SYSTEM$|^scheduled_tasks$)/F

      // Format the URL.
      | regex("^*(?<user.name.stripped>\w.+?)(@|$)", field=user.name, strict=false)
      | user.name.stripped:=lower(user.name.stripped)
      | user.name:=format("[%s](/search/user?term=_all:~'%s')", field=[user.name, user.name.stripped])

      // Alias the field if it does not exist.
      | case {
          event.reason!=*
            | event.reason:=event.action ;
          * ;
      }

      // Format the results.
      | groupby([#Vendor, user.name, client.ip, event.reason, client.ip.country, client.ip.state, client.ip.city, client.ip.org], function=count(as=count), limit=max)
      | sort(count, limit=1000)
    end: now
    start: 1d
    width: 12
    options:
      cell-overflow: wrap-text
      configured-columns:
        user.name:
          color: '#91BD0F'
      row-numbers-enabled: false
    visualization: table-view
    title: Authentication - Success
    isLive: false
    type: query
  d4487ff0-b9c0-49cc-82f2-bd8d6caaab40:
    x: 0
    y: 2
    height: 2
    queryString: |-
      // Read the CSV and count.
      | readFile("aid_master_main.csv")
      | in(field=cid, values=[?cid_input])
      | count()
    end: now
    start: 1d
    width: 3
    options:
      default: {}
    visualization: single-value
    title: Sensor Count
    isLive: false
    type: query
  7cb63c68-1235-4cbc-8fdf-1f449429ef8c:
    x: 0
    y: 4
    description: Shows coverage of systems ingesting Data
    height: 4
    queryString: |-
      // increase the limit if there are more than 20 data sources
      | eventSize()
      | unit:convert(_eventSize, to="G")
      | timeChart(span=1h, function=sum("_eventSize"), series=#Vendor, limit=20)
    end: now
    start: 1d
    width: 12
    options:
      series: {}
      interpolation: natural
      legendLabelOverflow: truncate
      legend: true
      showDataPoints: true
      connect-points: false
      plotType: line
      maxSeriesCount: 50
      show-utc: true
      imputation: none
    visualization: time-chart
    title: Data Ingestion Coverage
    isLive: false
    type: query
  692ee352-4067-4414-939a-c66985e8bd6b:
    x: 0
    y: 0
    height: 5
    text: This section is related to authentication events from first- and third-party
      data. CrowdStrike's first-party data can often be used as a replacement for
      traditional log sources for these types of authentication queries, e.g. the
      example of RDP sessions to unmanaged hosts. A large number of authentication-related
      events are included in CrowdStrike sensor data by default.
    width: 2
    title: ''
    type: note
  6ba8f44f-0bd2-41c3-9db8-016f34e89e30:
    x: 0
    height: 4
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Filter to events with required fields, and rename fields to match CPS.
      | (#repo=xdr_indicatorsrepo Ngsiem.alert.id=/thirdparty|ngsiem/Fi)
        OR (#event_simpleName="Event_EppDetectionSummaryEvent" OR #event_simpleName="Event_IdpDetectionSummaryEvent" OR #event_simpleName="Event_DataProtectionDetectionSummaryEvent")
      | case {
          #type=falcon-raw-data
            | #event_simpleName=/Detection/
            | #event_simpleName!=DetectionExcluded
            | severity!="informational"
            | #event.kind:="alert"
            | #Vendor:="crowdstrike" ;
          #type!=falcon-raw-data
            | #event.kind="alert" ;
      }

      // Add a multipick array for value selection.
      | in(field=#Vendor, values=[?Vendor])

      // Group the results by #Vendor.
      | groupby(#Vendor, limit=max)
    end: now
    start: 1d
    width: 4
    y: 4
    interactions:
    - name: filterClick
      titleTemplate: '{{ fields.#Vendor }}'
      queryString: "// Add a multipick array for value selection.\n| in(field=#repo.cid,\
        \ values=[?cid_input])\n| (#repo=xdr_indicatorsrepo Ngsiem.alert.id=/thirdparty|ngsiem/i)\
        \ \n    OR (#event_simpleName=\"Event_EppDetectionSummaryEvent\" OR #event_simpleName=\"\
        Event_IdpDetectionSummaryEvent\" OR #event_simpleName=\"Event_DataProtectionDetectionSummaryEvent\"\
        )\n| case { \n    #type=falcon-raw-data\n      | #event_simpleName=/Detection/\n\
        \      | #event_simpleName!=DetectionExcluded|severity!=\"informational\"\n\
        \      | #event.kind:=\"alert\"\n      | #Vendor:=\"crowdstrike\" ;\n    #type!=falcon-raw-data\n\
        \      |#event.kind=\"alert\"\n} \n| #Vendor=?_Vendor"
      useWidgetTimeWindow: true
      arguments:
        _Vendor: '["{{fields.#Vendor}}"]'
        cid_input: '["{{ parameters.cid_input }}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      enableTrellis: false
      legendPosition: right
      series: {}
      withLegendTitle: false
    visualization: pie-chart
    title: Total Detections by Vendor
    isLive: false
    type: query
  58242c5e-5323-4746-94c3-75207ca28e06:
    x: 0
    y: 8
    height: 4
    queryString: |-
      #event_simpleName=UserLogon
      | wildcard(field=UserIsAdmin, pattern=?UserIsAdmin, ignoreCase=true)
      | wildcard(field=LogonType, pattern=?LogonType, ignoreCase=true)
      | timeChart(UserName)
    end: now
    start: 1d
    width: 6
    options:
      series: {}
      interpolation: natural
      legendLabelOverflow: truncate
      showDataPoints: true
      connect-points: false
      plotType: line
      show-utc: true
      imputation: none
    visualization: time-chart
    title: Authentication Analytics
    isLive: false
    type: query
  92b7b703-b9e6-43c3-b5bb-02b3c5f3fee5:
    x: 0
    y: 24
    height: 5
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
            | #event_simpleName=/UserLogonFail/F
            | #Vendor:="crowdstrike"
            | client.ip:=aip
            | user.name:=UserName
            | #event.module:="sso"
            | event.reason:=name ;
          #type!=falcon-raw-data
            | #event.outcome=failure
            | event.category[0]=authentication ;
      }

      // Enrich specific events with SubStatus.
      | case {
          #type=falcon-raw-data
            | SubStatus=*
            | $falcon/helper:enrich(field=SubStatus)
            | event.reason:=SubStatus ;
          * ;
      }

      // Add a multipick array for value selection.
      | in(field=#Vendor, values=[?Vendor])

      // Rename events that might have multiple username fields.
      | case {
          user.name="-"
            | user.target.name=/./F
            | rename([[user.target.name, user.name]]) ;
          * ;
      }

      // Enrich the source IP.
      | case {
          client.ip="-"
            | source.ip=/^\d/F
            | rename([[source.ip, client.ip]]) ;
          client.ip=/^\d/F ;
      }
      | ipLocation(client.ip)
      | asn(client.ip)

      // Ensure the user.name exists.
      | user.name=/./F
      | user.name!=/^(-)$/Fi

      // Format the URL.
      | regex("^*(?<user.name.stripped>\w.+?)(@|$)", field=user.name, strict=false)
      | user.name.stripped:=lower(user.name.stripped)
      | user.name:=format("[%s](/search/?term=_all:~'%s')", field=[user.name, user.name.stripped])

      // Alias the field if it does not exist.
      | case {
          event.reason!=*
            | event.reason:=event.action ;
          * ;
      }

      // Format the results.
      | groupby([#Vendor, user.name, client.ip, event.reason, client.ip.country, client.ip.state, client.ip.city, client.ip.org], function=count(as=count), limit=max)
      | sort(count, limit=1000)
    end: now
    start: 1d
    width: 12
    options:
      cell-overflow: wrap-text
      configured-columns:
        client.ip:
          render-as: go_to_events_link
        user.name:
          color: '#126cc6'
          render-as: link
          width: 298
      row-numbers-enabled: false
    visualization: table-view
    title: Authentication - Failure
    isLive: false
    type: query
  fa99cb2b-02a9-434e-b922-99f76f082229:
    x: 6
    height: 5
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
            | #event_simpleName=/UserLogonFail/F
            | #Vendor:="crowdstrike"
            | client.ip:=aip
            | user.name:=UserName
            | #event.module:="sso"
            | event.reason:=name ;
          #type!=falcon-raw-data
            | #event.outcome=failure
            | event.category[0]=authentication ;
      }

      // Enrich specific events with SubStatus.
      | case {
          #type=falcon-raw-data
            | SubStatus=*
            | $falcon/helper:enrich(field=SubStatus)
            | event.reason:=SubStatus ;
          * ;
      }

      // Add a multipick array for value selection.
      | in(field=#Vendor, values=[?Vendor])

      // Rename events that might have multiple username fields.
      | case {
          user.name="-"
            | user.target.name=/./F
            | rename([[user.target.name, user.name]]) ;
          * ;
      }

      // Enrich the source IP.
      | client.ip=*
      | ipLocation(client.ip)
      | asn(client.ip)

      // Ensure the user.name exists.
      | user.name=/./F
      | user.name!=/^(-)$/Fi

      // Alias the field if it does not exist.
      | case {
          event.reason!=*
            | event.reason:=event.action ;
          * ;
      }

      | top(event.reason, limit=10)
    end: now
    start: 1d
    width: 6
    y: 14
    interactions:
    - name: filterClick
      titleTemplate: '{{ fields.event.reason }}'
      queryString: "// Add a multipick array for value selection.\n| in(field=#repo.cid,\
        \ values=[?cid_input])\n| case { \n    #type=falcon-raw-data\n      | #event_simpleName=/UserLogonFailed/\n\
        \      | #Vendor:=\"crowdstrike\"\n      | client.ip:=aip\n      | user.name:=UserName\n\
        \      | #event.module:=\"sso\"\n      | event.reason:=name ;\n    #type!=falcon-raw-data\n\
        \      | #event.outcome=failure\n      | event.category[0]=authentication\
        \ ;\n}\n| client.ip=*\n| ipLocation(client.ip)\n| asn(client.ip)\n| case {\n\
        \    user.name=\"-\"\n      | user.target.name=/./F\n      | rename([[user.target.name,\
        \ user.name]]) ;\n    * ;\n}\n| user.name=/./\n| user.name!=/(\\$$|^DWM-|^LOCAL\\\
        sSERVICE$|^UMFD-|^$|^SYSTEM$|^ANONYMOUS\\sLOGON$|^NT\\sAUTHORITY\\\\SYSTEM$|^scheduled_tasks$)/\n\
        | case {\n    event.reason!=*\n      | event.reason:=event.action ;\n    *\
        \ ;\n}\n| event.reason=?event_reason"
      useWidgetTimeWindow: true
      arguments:
        cid_input: '["{{ parameters.cid_input }}"]'
        event_reason: '["{{fields.event.reason}}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      innerRadius: 50
      legendPosition: right
      series: {}
      withLegendTitle: false
    visualization: pie-chart
    title: Authentication - Top Failure Reasons
    isLive: false
    type: query
  67a6a7ab-cc34-4272-a415-ddbf8de3cc9d:
    x: 6
    y: 8
    height: 4
    queryString: |-
      // Read the CSV and count.
      | readFile("aid_master_main.csv")
      | sankey(source="Version", target="AgentVersion")
    visualization: sankey
    end: now
    start: 1d
    width: 6
    title: Falcon Agent version per OS
    isLive: false
    type: query
  2463873a-0645-4f9e-8c8c-dbaf7b7c419c:
    x: 2
    height: 5
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Search for Windows RDP events.
      | #event_simpleName=UserLogon
      | event_platform="Win"
      | LogonType=10

      // Rename for parsing standards.
      | rename([[LocalIP, source.ip], [RemoteIP, destination.ip], [ComputerName, source.hostname]])

      // Ensure the destination.ip exists.
      | destination.ip=*

      // Identify anything where the remote IP is not a known Agent ID for this CID.
      | !match(file="aid_master_main.csv", field=RemoteIP, column=LocalAddressIP4, strict=true)

      // Add the ComputerName
      | default(field=[source.hostname], value="-")
      | format("%s  %s", field=[source.ip, source.hostname], as=source.details)

      // Find the top 20 results.
      | top([source.details, destination.ip], limit=15)

      // Visualize the results.
      | sankey(source="source.details", target="destination.ip")
    visualization: sankey
    end: now
    start: 1d
    width: 6
    y: 0
    interactions:
    - name: filterClick
      titleTemplate: '{{ fields.source }} -> {{ fields.target }}'
      queryString: "// Add a multipick array for value selection.\n| in(field=#repo.cid,\
        \ values=[?cid_input])\n| #event_simpleName=UserLogon\n| event_platform=\"\
        Win\"\n| LogonType=10\n| rename([[LocalIP, source.ip], [RemoteIP, destination.ip],\
        \ [ComputerName, source.hostname]])\n| destination.ip=*\n| !match(file=\"\
        aid_master_main.csv\", field=RemoteIP, column=LocalAddressIP4, strict=true)\n\
        | default(field=[source.hostname], value=\"-\")\n| format(\"%s  %s\", field=[source.ip,\
        \ source.hostname], as=source.details)\n| source.details=?source_details \n\
        | destination.ip=?destination_ip "
      useWidgetTimeWindow: true
      arguments:
        cid_input: '["{{ parameters.cid_input }}"]'
        destination_ip: '["{{ fields.target }}"]'
        source_details: '["{{ fields.source }}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    title: Top RDP Sessions to Potentially Unmanaged Hosts
    isLive: false
    type: query
  e56a243e-390f-43d7-a37a-5cd59319785c:
    x: 2
    height: 4
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Filter to events with required fields, and rename fields to match CPS.
      | (#repo=xdr_indicatorsrepo Ngsiem.alert.id=/thirdparty|ngsiem/Fi)
        OR (#event_simpleName="Event_EppDetectionSummaryEvent" OR #event_simpleName="Event_IdpDetectionSummaryEvent" OR #event_simpleName="Event_DataProtectionDetectionSummaryEvent")
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/Detection/F
              | #event_simpleName!=DetectionExcluded
              | severity!="informational"
              | #event.kind:="alert"
              | #Vendor:="crowdstrike" ;
          #type!=falcon-raw-data
              | #event.kind="alert" ;
      }

      // Add a multipick array for value selection.
      | in(field=#Vendor, values=[?Vendor])

      // Build a timechart based on the vendor.
      | timechart(#Vendor, limit=20)
    end: now
    start: 1d
    width: 10
    y: 0
    interactions:
    - name: filterClick
      titleTemplate: '{{ fields.#Vendor }}'
      queryString: "// Add a multipick array for value selection.\n| in(field=#repo.cid,\
        \ values=[?cid_input])\n\n| case { \n    #type=falcon-raw-data\n      | #event_simpleName=/Detection/\n\
        \      | #event_simpleName!=DetectionExcluded\n      | severity!=\"informational\"\
        \n      | #event.kind:=\"alert\"\n      | #Vendor:=\"crowdstrike\" ;\n   \
        \ #type!=falcon-raw-data\n      | #event.kind=\"alert\" ;\n} \n| #Vendor=?_Vendor"
      useWidgetTimeWindow: true
      arguments:
        _Vendor: '["{{fields.#Vendor}}"]'
        cid_input: '["{{ parameters.cid_input }}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      series: {}
      gradient: false
      interpolation: step-after
      showDataPoints: false
      connect-points: false
      stacking: none
      yAxisScale: linear
      plotType: area
      regression: false
      imputation: none
    visualization: time-chart
    title: Detections by Vendor Over Time
    isLive: false
    type: query
  87363ebb-3194-4778-822d-3f4b12679504:
    x: 0
    y: 18
    height: 4
    queryString: |-
      #repo=fusion
      | groupBy([trigger.data.Workflow.Definition.Name, trigger.data.Workflow.Execution.Time.Date])
    end: now
    start: 7d
    width: 4
    options:
      cell-overflow: wrap-text
      configured-columns: {}
      row-numbers-enabled: false
    visualization: table-view
    title: Workflows executed by day
    isLive: false
    type: query
  3fe394a9-f251-4d9f-84e5-2f7b1448f32b:
    x: 0
    y: 12
    height: 4
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Filter to events with required fields, and rename fields to match CPS.
      | case {
          #type=falcon-raw-data
              | #event_simpleName=/UserLogon$/F
              | #Vendor:="crowdstrike"
              | client.ip:=aip
              | user.name:=UserName
              | #event.module:="sso"
              | event.reason:=name ;
          #type!=falcon-raw-data
      //        | #event.outcome=success
              | event.category[0]=authentication ;
      }

      // Enrich specific events with SubStatus.
      | case {
          #type=falcon-raw-data
            | SubStatus=*
            | $falcon/helper:enrich(field=SubStatus)
            | event.reason:=SubStatus ;
          * ;
      }

      // Add a multipick array for value selection.
      | in(field=#Vendor, values=[?Vendor])

      // Rename events that might have multiple username fields.
      | case {
          user.name="-"
            | user.target.name=/./F
            | rename([[user.target.name, user.name]]) ;
          * ;
      }

      // Ensure the user.name exists.
      | user.name=/./F
      | user.name!=/(\$$|^DWM-|^LOCAL\sSERVICE$|^UMFD-|^$|^SYSTEM$|^ANONYMOUS\sLOGON$|^NT\sAUTHORITY\\SYSTEM$|^scheduled_tasks$)/F

      // Alias the field if it does not exist.
      | case {
          event.reason!=*
            | event.reason:=event.action ;
          * ;
      }

      // Format the results.
      | groupBy(field=[host.name, "event.category[0]", "event.type[0]"], function=count())
      | table([host.name, "event.category[0]", "event.type[0]"])
    end: now
    start: 7d
    width: 6
    options:
      cell-overflow: wrap-text
      configured-columns: {}
      row-numbers-enabled: false
    visualization: table-view
    title: Audited Hosts
    isLive: false
    type: query
  67d29952-833b-4ee1-8254-639472715fe9:
    x: 8
    height: 5
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Search for Windows RDP events.
      | #event_simpleName=UserLogon
      | event_platform="Win"
      | LogonType=10

      // Rename for parsing standards.
      | rename([[RemoteIP, destination.ip], [UserName, user.name]])

      // Ensure the destination.ip exists.
      | destination.ip=*

      // Identify anything where the remote IP is not a known Agent ID for this CID.
      | !match(file="aid_master_main.csv", field=RemoteIP, column=LocalAddressIP4, strict=true)

      // Find the top 20 results.
      | top([user.name], limit=10)
    end: now
    start: 1d
    width: 4
    y: 0
    interactions:
    - name: filterClick
      titleTemplate: '{{ fields.user.name }}'
      queryString: "// Add a multipick array for value selection.\n| in(field=#repo.cid,\
        \ values=[?cid_input])\n| #event_simpleName=UserLogon\n| event_platform=\"\
        Win\"\n| LogonType=10\n| rename([[RemoteIP, destination.ip], [UserName, user.name]])\n\
        | destination.ip=*\n| !match(file=\"aid_master_main.csv\", field=RemoteIP,\
        \ column=LocalAddressIP4, strict=true)\n| user.name=?user_name "
      useWidgetTimeWindow: true
      arguments:
        cid_input: '["{{ parameters.cid_input }}"]'
        user_name: '["{{fields.user.name}}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      legendPosition: right
      series: {}
    visualization: pie-chart
    title: Top RDP Users to Potentially Unmanaged Hosts
    isLive: false
    type: query
  note-1725902925766-0:
    x: 0
    y: 0
    height: 9
    text: "This query displays sensors with multiple detection types. These can be\
      \ used to create ad-hoc incidents and demonstrate the power of the Next-Gen\
      \ SIEM workbench. \n\n1. Apply any required incident filters. The minimum number\
      \ of detection sources must be specified, e.g. *3*. Click \"Apply\" after you've\
      \ selected a value.  \n2. Click on the `⋮` next to the aid you would like to\
      \ create an incident for, followed by *Search Detection Events*. \n3. Click\
      \ \"Create one-time incident\" after the results have loaded. \n4. Pivot to\
      \ the workbench to view the incident. The incident may take a short amount of\
      \ time to populate. \n\n**Note**: highlighted values will link to other components\
      \ within the Falcon platform. "
    width: 2
    title: ''
    type: note
  020a3b23-8ea8-4e85-a8ef-5b35026fdfc4:
    x: 4
    height: 4
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Filter to events with required fields, and rename fields to match CPS.
      | (#repo=xdr_indicatorsrepo Ngsiem.alert.id=/thirdparty|ngsiem/Fi)
        OR (#event_simpleName="Event_EppDetectionSummaryEvent" OR #event_simpleName="Event_IdpDetectionSummaryEvent" OR #event_simpleName="Event_DataProtectionDetectionSummaryEvent")
      | case {
          #type=falcon-raw-data
            | #event_simpleName=/Detection/
            | #event_simpleName!=DetectionExcluded
            | severity!="informational"
            | #event.kind:="alert"
            | #Vendor:="crowdstrike"
            | lower(Tactic, as=event.category) ;
          #type!=falcon-raw-data
            | #event.kind="alert" ;
      }

      // Add a multipick array for value selection.
      | in(field=#Vendor, values=[?Vendor])

      // Spit any of the event.category[] values into individual values, then ensure a value exists.
      | split(event.category)
      | event.category=/./

      // Find the top 10 event categories.
      | top(event.category, limit=10)
    end: now
    start: 1d
    width: 4
    y: 4
    interactions:
    - name: filterClick
      titleTemplate: '{{ fields.event.category }}'
      queryString: "// Add a multipick array for value selection.\n| in(field=#repo.cid,\
        \ values=[?cid_input])\n| (#repo=xdr_indicatorsrepo Ngsiem.alert.id=/thirdparty|ngsiem/i)\
        \ \n    OR (#event_simpleName=\"Event_EppDetectionSummaryEvent\" OR #event_simpleName=\"\
        Event_IdpDetectionSummaryEvent\" OR #event_simpleName=\"Event_DataProtectionDetectionSummaryEvent\"\
        )\n| case { \n    #type=falcon-raw-data\n      | #event_simpleName=/Detection/\n\
        \      | #event_simpleName!=DetectionExcluded\n      | severity!=\"informational\"\
        \n      | #event.kind:=\"alert\"\n      | #Vendor:=\"crowdstrike\"\n     \
        \ | lower(Tactic, as=event.category) ;\n    #type!=falcon-raw-data\n     \
        \ | #event.kind=\"alert\" ;\n}\n| split(event.category)\n| event.category=/./\n\
        | event.category=?event_category"
      useWidgetTimeWindow: true
      arguments:
        cid_input: '["{{ parameters.cid_input }}"]'
        event_category: '["{{fields.event.category}}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      legendPosition: right
      series: {}
      withLegendTitle: false
    visualization: pie-chart
    title: Top Detections by Category
    isLive: false
    type: query
  note-1727187815054-0:
    x: 9
    y: 0
    height: 3
    text: |-
      * [Data onboarding](/data-connectors/)
      * [Advanced event search](/investigate/search)
      * [Rules](/xdr/rules)
      * [Detection coverage](/xdr/rules/detection-coverage)
      * [Detections](/unified-detections)
      * [Incidents](/xdr/incidents)
      * [Fusion SOAR dashboard](/workflow/fusion/dashboard)
    width: 3
    title: Next-Gen SIEM Components
    type: note
  5777baf2-55e4-4311-ae40-6bd0457c32ec:
    x: 8
    height: 4
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Filter to events with required fields, and rename fields to match CPS.
      | (#repo=xdr_indicatorsrepo Ngsiem.alert.id=/thirdparty|ngsiem/Fi)
        OR (#event_simpleName="Event_EppDetectionSummaryEvent" OR #event_simpleName="Event_IdpDetectionSummaryEvent" OR #event_simpleName="Event_DataProtectionDetectionSummaryEvent")
      | case {
          #type=falcon-raw-data
            | #event_simpleName=/Detection/F
            | #event_simpleName!=DetectionExcluded
            | severity!="informational"
            | #event.kind:="alert"
            | #Vendor:="crowdstrike"
            | lower(Tactic, as=event.category) ;
          #type!=falcon-raw-data
            | #event.kind="alert" ;
      }

      // Add a multipick array for value selection.
      | in(field=#Vendor, values=[?Vendor])

      // Find the top 10 event categories.
      | Ngsiem.event.data_domain=/./F
      | top(Ngsiem.event.data_domain, limit=10)
    end: now
    start: 1d
    width: 4
    y: 4
    interactions:
    - name: filterClick
      titleTemplate: '{{ fields.Ngsiem.event.data_domain }}'
      queryString: "// Add a multipick array for value selection.\n| in(field=#repo.cid,\
        \ values=[?cid_input])\n// Filter to events with required fields, and rename\
        \ fields to match CPS.\n| (#repo=xdr_indicatorsrepo Ngsiem.alert.id=/thirdparty|ngsiem/i)\
        \ \n    OR (#event_simpleName=\"Event_EppDetectionSummaryEvent\" OR #event_simpleName=\"\
        Event_IdpDetectionSummaryEvent\" OR #event_simpleName=\"Event_DataProtectionDetectionSummaryEvent\"\
        )\n| case {\n    #type=falcon-raw-data\n      | #event_simpleName=/Detection/\n\
        \      | #event_simpleName!=DetectionExcluded\n      | severity!=\"informational\"\
        \n      | #event.kind:=\"alert\"\n      | #Vendor:=\"crowdstrike\"\n     \
        \ | lower(Tactic, as=event.category) ;\n    #type!=falcon-raw-data\n     \
        \ | #event.kind=\"alert\" ;\n}\n\n// Find the top 10 event categories.\n|\
        \ Ngsiem.event.data_domain=?Ngsiem_event_data_domain"
      useWidgetTimeWindow: true
      arguments:
        Ngsiem_event_data_domain: '["{{ fields.Ngsiem.event.data_domain }}"]'
        cid_input: '["{{ parameters.cid_input }}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      legendPosition: right
      series: {}
      withLegendTitle: false
    visualization: pie-chart
    title: Top Detections by Data Domain
    isLive: false
    type: query
  b6ed9d1a-d340-45d7-93f2-5b75d384d66c:
    x: 3
    y: 0
    height: 6
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Filter to events with required fields, and rename fields to match CPS.
      | (#repo=xdr_indicatorsrepo Ngsiem.alert.id=/thirdparty|ngsiem/Fi)
        OR (#event_simpleName="Event_EppDetectionSummaryEvent" OR #event_simpleName="Event_IdpDetectionSummaryEvent" OR #event_simpleName="Event_DataProtectionDetectionSummaryEvent")
      | case {
          #type=falcon-raw-data
            | #event_simpleName=/Detection/F
            | #event_simpleName!="DetectionExcluded"
            | severity!="informational"
            | #event.kind:="alert"
            | #Vendor:="crowdstrike"
            | destination.ip:=RemoteAddressIP4
            | source.ip:=LocalAddressIP4 ;
          #type!=falcon-raw-data
          | #event.kind="alert" ;
      }

      // Add a multipick array for value selection.
      | in(field=#Vendor, values=[?Vendor])

      // Check to ensure the IP exists and it's routable.
      | case {
          destination.ip=*
              | mapIp:=destination.ip ;
          aip=*
              | mapIp:=aip ;
          source.ip=*
              | mapIp:=source.ip ;
      }

      // Map out the results.
      | worldMap(ip=mapIp)
    end: now
    start: 1d
    width: 6
    options:
      autoRotate: true
      projection: orthographic
      zLevel: 1
    visualization: world-map
    title: World Map of Detection IPs
    isLive: false
    type: query
  f3258151-1daf-404b-84d4-6a7ec409d78b:
    x: 4
    y: 5
    height: 4
    queryString: |-
      #event_simpleName=UserLogon
      | event_platform=Win
      | UserSid="S-1-5-21-*"
      | wildcard(field=UserIsAdmin, pattern=?UserIsAdmin, ignoreCase=true)
      | wildcard(field=UserName, pattern=?UserName, ignoreCase=true)
      | wildcard(field=LogonType, pattern=?LogonType, ignoreCase=true)
      | default(field=[PasswordLastSet], "N/A")
      | passwordAge:=(now()-(PasswordLastSet*1000))/1000/60/60/24
      | passwordAgeDays:=round("passwordAge")
      | passwordAgeDays>365
      | count(UserSid, distinct=true)
    end: now
    start: 7d
    width: 4
    options:
      default: {}
    visualization: single-value
    title: Stale Passwords
    isLive: false
    type: query
  1648bf3c-b982-4b6c-a381-4e4b8b2f92ac:
    x: 2
    y: 2
    height: 7
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Add a multipick array for value selection.
      | in(field=#Vendor, values=[?Vendor])

      // Identify events with NG-SIEM indicators.
      | #type="none"
      | case {
          Ngsiem.event.type="ngsiem-rule-trigger-event"
              | rename([
                  [rule.name, threat.indicator.name],
                  [Ngsiem.event.source_ips[0], source.ip],
                  [Ngsiem.event.hostnames[0], ComputerName],
                  [Ngsiem.event.type, #event.module]
              ]) ;
          Ngsiem.detection.id=* ;
      }

      // Rename events that might be missing the module value.
      | case {
          #event.module!=*
              | rename([[Vendor.Product, #event.module]])
              | #event.module:=lower(#event.module) ;
          * ;
      }

      // Add a severity filter.
      | default(field=event.severity, value=0)
      | event.severity>=?{min_or_equal_severity=0}

      // Rename fields to keep the names common.
      | rename([
          [agent.id, aid],
          [Vendor.SourceEndpointSensorId, aid],
          [Ngsiem.event.vendor, #Vendor],
          [Vendor.threat_id, threat.indicator],
          [UserName, user.name]
      ])
      | #Vendor:=lower(#Vendor)

      // Grab enrichment data.
      | match(file="aid_master_main.csv", field=[aid], column=[aid], include=[aid, ComputerName, LocalAddressIP4], strict=false)
      | case {
          aid!=*
              | match(file="aid_master_main.csv", field=[ComputerName], column=[ComputerName], include=[aid, ComputerName, LocalAddressIP4], nrows=10, strict=false)
              | match(file="aid_master_main.csv", field=[source.ip], column=[LocalAddressIP4], include=[aid, ComputerName, LocalAddressIP4], nrows=10, strict=false)
              | match(file="aid_master_main.csv", field=[client.ip], column=[LocalAddressIP4], include=[aid, ComputerName, LocalAddressIP4], nrows=10, strict=false)
              | match(file="aid_master_main.csv", field=[destination.ip], column=[LocalAddressIP4], include=[aid, ComputerName, LocalAddressIP4], nrows=10, strict=false) ;
          * ;
      }

      // Ensure we have an aid.
      | aid=*
      | aid!="NotMatched"

      // Clean up the names for certain events.
      | regex("^(?<threat.indicator.name>.+)\s+->\s\((?<event.severity>\d+)\)", field=threat.indicator.name, strict=false, flags=F)

      // Check if the field exists and then map the indicator name to the score.
      | case {
          threat.indicator.name!=/\s+-> /F threat.indicator.name=*
              | format(format="%s -> %s", field=[threat.indicator.name, event.severity], as=threat.indicator.map.asset) ;
          * ;
      }

      // Combine names to show where the alerts came from.
      | format(format="%s: %s", field=[#Vendor, #event.module], as=productTypes.asset)

      // Keep the asset and user values separate.
      | rename([[event.severity, event.severity.asset]])

      // Map events that have a username but no aid.
      | join(
          query={
              Ngsiem.parent.incident.id!=*
              | Ngsiem.parent.incident.id[0]!=*
              | Ngsiem.detection.id=*
              | user.name=* OR user.target.name=* OR email.to.address[0]=*
              | agent.id!=*
              | rename(field="user.target.name", as="user.name")
              | default(field=event.severity, value=0)
              | case {
                  threat.indicator.name=*
                      | format(format="%s -> %s", field=[threat.indicator.name, event.severity], as=threat.indicator.map.user) ;
                  * ;
              }
              | case {
                  #event.module!=*
                      | rename([[Vendor.Product, #event.module]])
                      | #event.module:=lower(#event.module) ;
                  * ;
              }
              // Normalize the email address.
              | case {
                  email.to.address[0]=*
                      | regex("(?<username>[^\@].*)@.+\.", field=email.to.address[0], flags=F)
                      | rename(field="username", as="user.name");
                  * ;
              }
              // Combine names to show where the alerts came from.
              | rename([
                  [event.module, #event.module],
                  [event.severity, event.severity.user]
              ])
              | format(format="%s: %s", field=[#Vendor, #event.module], as=productTypes.user)
              // Ensure we have real users.
          },
          field=[user.name],
          include=[threat.indicator.map.user, productTypes.user, event.severity.user],
          mode=left,
          max=100
      )

      // Group the results.
      | groupBy(aid,
          function=[
              collect([ComputerName, user.name, productTypes.asset, productTypes.user, threat.indicator.map.asset, threat.indicator.map.user], limit=1000),
              sum(event.severity.asset, as=TotalAssetScore),
              sum(event.severity.user, as=TotalUserScore),
              count(productTypes.asset, distinct=true, as=AssetDetectionSourceCount),
              count(productTypes.user, distinct=true, as=UserDetectionSourceCount),
              count(as=DetectionCount)
          ],
          limit=max
      )

      // Get the total scores.
      | TotalRiskScore:=TotalAssetScore+TotalUserScore
      | UniqueDetectionSources:=AssetDetectionSourceCount+UserDetectionSourceCount

      // Filter for the minimum unique products count.
      | UniqueDetectionSources>=?{DetectionSourceCount=0}

      // Combine values.
      // Regex to ensure it's not a blank line.
      | case {
          threat.indicator.map.asset=/\w+/F threat.indicator.map.user=/\w+/F
              | format(format="%s\n%s", field=[threat.indicator.map.asset, threat.indicator.map.user], as=threat.indicator.value) ;
          threat.indicator.map.asset=/\w+/F
              | rename([[threat.indicator.map.asset, threat.indicator.value]]) ;
          threat.indicator.map.user=/\w+/F
              | rename([[threat.indicator.map.user, threat.indicator.value]]) ;
      }

      | case {
          productTypes.asset=* productTypes.user=*
              | format(format="%s\n%s", field=[productTypes.asset, productTypes.user], as=ProductModules) ;
          productTypes.asset=*
              | rename([[productTypes.asset, ProductModules]]) ;
          productTypes.user=*
              | rename([[productTypes.user, ProductModules]]) ;
      }

      // Include from the drop-down.
      | in(field=ProductModules, values=[?included_ProductModules])

      // Remove any blank lines and then capture up to the first 10 values. Only done to save screen space.
      | replace("^\n", with="", field=threat.indicator.value)
      | regex("^(?<threat.indicator.value>.*?(\n|$)(.*?\n){0,9})", field=threat.indicator.value, strict=false, flags=Fd)

      // One last format of the output.
      | default(field=user.name, value="-")
      | groupby([TotalRiskScore, ComputerName, user.name, aid, threat.indicator.value, ProductModules, UniqueDetectionSources], function=[], limit=max)
      | sort(TotalRiskScore, limit=1000)
      | ComputerName:=format("[%s](/search/?term=_all:~'%s')", field=[ComputerName, ComputerName])
    end: now
    start: 1d
    width: 10
    options:
      cell-overflow: wrap-text
      configured-columns:
        ComputerName:
          color: '#126cc6'
          render-as: link
        agent.id:
          render-as: go_to_events_link
        aid:
          render-as: value
      row-numbers-enabled: false
    visualization: table-view
    title: Risk Scores
    isLive: false
    type: query
  02d35c48-c437-4b32-8898-a3837e1e37c5:
    x: 0
    height: 5
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Filter to events with required fields, and rename fields to match CPS.
      | (#repo=xdr_indicatorsrepo Ngsiem.alert.id=/thirdparty|ngsiem/Fi)
        OR (#event_simpleName="Event_EppDetectionSummaryEvent" OR #event_simpleName="Event_IdpDetectionSummaryEvent" OR #event_simpleName="Event_DataProtectionDetectionSummaryEvent")
      | case {
          #type=falcon-raw-data
            | #event_simpleName=/Detection/F
            | #event_simpleName!=/DetectionExcluded|Event_XdrDetectionSummaryEvent/F
            | severity!="informational"
            | #event.kind:="alert"
            | threat.tactic.name[0]:=Tactic
            | threat.technique.name[0]:=Technique
            | threat.technique.name[0]=/./F
            | #Vendor:="crowdstrike" ;
          #type!=falcon-raw-data
            | #event.kind="alert" ;
      }

      // Add a multipick array for value selection.
      | in(field=#Vendor, values=[?Vendor])

      // Group the top 10 results.
      | groupBy([Technique, Tactic], function=count(#event.kind), limit=10)
    end: now
    start: 1d
    width: 12
    y: 13
    interactions:
    - name: filterClick
      titleTemplate: '{{ fields.Tactic }}, {{ fields.Technique }}'
      queryString: "// Add a multipick array for value selection.\n| in(field=#repo.cid,\
        \ values=[?cid_input])\n| (#repo=xdr_indicatorsrepo Ngsiem.alert.id=/thirdparty|ngsiem/i)\
        \ \n    OR (#event_simpleName=\"Event_EppDetectionSummaryEvent\" OR #event_simpleName=\"\
        Event_IdpDetectionSummaryEvent\" OR #event_simpleName=\"Event_DataProtectionDetectionSummaryEvent\"\
        )\n| case { \n    #type=falcon-raw-data\n      | #event_simpleName=/Detection/\n\
        \      | #event_simpleName!=/DetectionExcluded|Event_XdrDetectionSummaryEvent/\n\
        \      | severity!=\"informational\"\n      | #event.kind:=\"alert\"\n   \
        \   | threat.tactic.name[0]:=Tactic\n      | threat.technique.name[0]:=Technique\n\
        \      | threat.technique.name[0]=/./\n      | #Vendor:=\"crowdstrike\" ;\n\
        \    #type!=falcon-raw-data\n      | #event.kind=\"alert\" ;\n} \n| Tactic=?Tactic\
        \ \n| Technique=?Technique"
      useWidgetTimeWindow: true
      arguments:
        Tactic: '["{{fields.Tactic}}"]'
        Technique: '["{{fields.Technique}}"]'
        cid_input: '["{{ parameters.cid_input }}"]'
      openInNewTab: true
      isLive: false
      type: searchlink
    options:
      labelAngle: 30
      colorPalette: monoMagenta
      withLegendTitle: false
      labelAlign: center
      includeHistogram: false
      gapBetweenRectangles: true
    visualization: heat-map
    title: Top Tactics and Techniques
    isLive: false
    type: query
  note-1726166476961-1:
    x: 0
    y: 0
    height: 2
    text: |
      ```
      date: 2024-28-12
      version: 1.0.0
      ```
    width: 3
    title: ''
    type: note
  351ed275-203b-4242-8f16-0be3e0269688:
    x: 0
    y: 9
    height: 5
    queryString: |-
      // Add a multipick array for value selection.
      | in(field=#repo.cid, values=[?cid_input])

      // Search for Windows RDP events.
      | #event_simpleName=UserLogon
      | event_platform="Win"
      | LogonType=10

      // Rename for parsing standards.
      | rename([[LocalIP, source.ip], [RemoteIP, destination.ip], [ComputerName, source.hostname], [UserName, user.name]])

      // Ensure the destination.ip exists.
      | destination.ip=*

      // Identify anything where the remote IP is not a known Agent ID for this CID.
      | !match(file="aid_master_main.csv", field=RemoteIP, column=LocalAddressIP4, strict=true)

      // Enrich the data.
      | ipLocation(field=destination.ip)
      | asn(field=destination.ip)

      // Add default values.
      | default(field=[destination.ip.city, destination.ip.state, destination.ip.country, destination.ip.org], value="-")

      // Format the field order.
      | groupBy([aid, source.hostname, source.ip, destination.ip, destination.ip.city, destination.ip.state, destination.ip.country, destination.ip.org],
          function=[collect(user.name, limit=10), count(as=count)],
          limit=max
      )
      // Sort the results.
      | sort(field=count, limit=1000)

      // Remove unnecessary fields.
      | drop([destination.ip.asn, destination.ip.lat, destination.ip.lon])

      // Include links to search.
      | source.hostname:=format("[%s](/search/?term=_all:~'%s')", field=[source.hostname, source.hostname])
      | source.ip:=format("[%s](/search/?term=_all:~'%s')", field=[source.ip, source.ip])
      | destination.ip:=format("[%s](/search/?term=_all:~'%s')", field=[destination.ip, destination.ip])
    end: now
    start: 1d
    width: 12
    options:
      cell-overflow: wrap-text
      configured-columns:
        aid:
          render-as: go_to_events_link
        destination.ip:
          color: '#126cc6'
        source.hostname:
          color: '#126cc6'
        source.ip:
          color: '#126cc6'
      row-numbers-enabled: false
    visualization: table-view
    title: RDP Sessions to Potentially Unmanaged Hosts
    isLive: false
    type: query
$schema: https://schemas.humio.com/dashboard/v0.18.0
parameters:
  cid_input:
    label: CID
    query: |-
      #data_source_name=cid_name #repo=sensor_metadata #type=metadata-parser
      | cid=* name=*
      | top([cid, name], limit=100)
      | cidname_cid:=format("%s -> %s", field=[name, cid])
      | sort(name, order=asc, limit=1000)
    timeInterval: 1d
    useDashboardTimeIfSet: true
    defaultValue: '*'
    width: 1
    order: 0
    valueField: cid
    type: query
    labelField: cidname_cid
  DetectionSourceCount:
    label: Minimum Unique Detection Sources
    order: 1
    values:
    - '0'
    - '1'
    - '2'
    - '3'
    - '4'
    - '5'
    - '6'
    - '7'
    - '8'
    - '9'
    - '10'
    type: list
    width: 1
  min_or_equal_severity:
    label: Minimum Severity [0-100]
    order: 0
    values:
    - '0'
    - '10'
    - '20'
    - '30'
    - '40'
    - '50'
    - '60'
    - '70'
    - '80'
    - '90'
    type: list
    defaultValue: '0'
    width: 1
  VendorName:
    label: VendorName
    order: 2
    type: text
    defaultValue: '*'
    width: 1
  included_ProductModules:
    label: Must Include
    query: |-
      in(field=#Vendor, values=[?Vendor])
      | default(field=event.severity, value=0)
      | #type=none
      | case {
          Ngsiem.event.type="ngsiem-rule-trigger-event"
              | rename([[Ngsiem.event.type, #event.module]]) ;
          Ngsiem.parent.incident.id!=*
              | Ngsiem.parent.incident.id[0]!=*
              | Ngsiem.detection.id=* ;
      }
      | case {
          #event.module!=*
              | rename([[Vendor.Product, #event.module]])
              | #event.module:=lower(#event.module) ;
          * ;
      }
      | format(format="%s: %s", field=[#Vendor, #event.module], as=productTypes)
      | top(productTypes, limit=100)
      | sort(productTypes, order=asc)
    timeInterval: 1d
    useDashboardTimeIfSet: true
    type: query
    defaultValue: '*'
    width: 2
    order: 3
    valueField: productTypes
  Vendor:
    label: Vendor
    query: top(#Vendor, limit=25) | sort(#Vendor, order=asc, limit=25)
    timeInterval: 1d
    useDashboardTimeIfSet: true
    type: query
    defaultValue: '*'
    width: 1
    order: 1
    valueField: '#Vendor'
